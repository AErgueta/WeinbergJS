<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Calculadora de Cotización</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <style>
        /* Estilos personalizados para mantener la consistencia */
        body {
            background-color: #f8f9fa;
        }
        .card {
            margin-top: 20px;
            border: 1px solid #ddd;
            border-radius: 5px;
        }
        .card-header {
            background-color: #007bff;
            color: white;
        }
        .btn-primary {
            background-color: #007bff;
            border-color: #007bff;
        }
        .btn-primary:hover {
            background-color: #0056b3;
            border-color: #0056b3;
        }
        .hidden {
            display: none;
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Contenedor para Cabecera y Detalle (lado a lado) -->
        <div class="row">
            <!-- Sección de Cabecera -->
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title">Cabecera</h5>
                    </div>
                    <div class="card-body" id="cabecera-body">
                        <!-- Campos de cabecera compactos -->
                        <div class="form-row">
                            <!-- Fecha y Fecha de Vencimiento en una sola fila -->
                            <div class="form-group col-md-6">
                                <label for="fecha">Fecha:</label>
                                <input type="date" id="fecha" name="fecha" class="form-control form-control-sm" value="{{cabecera.fecha}}" required>
                            </div>
                            <div class="form-group col-md-6">
                                <label for="fechaVence">Fecha de Vencimiento:</label>
                                <input type="date" id="fechaVence" name="fechaVence" class="form-control form-control-sm" value="{{cabecera.fechaVence}}" required>
                            </div>
                        </div>
                        <!-- Descripción Corta en una fila debajo -->
                        <div class="form-row">
                            <div class="form-group col-md-12">
                                <label for="descripcionCorta">Descripción Corta:</label>
                                <input type="text" id="descripcionCorta" name="descripcionCorta" class="form-control form-control-sm" value="{{cabecera.descripcionCorta}}" required>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Sección de Detalle -->
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title">Detalle</h5>
                    </div>
                    <div class="card-body" id="detalle-body">
                        <!-- Campos de detalle compactos -->
                        <div class="form-row">
                            <!-- Línea, Tipo y Cantidad en una sola fila -->
                            <div class="form-group col-md-4">
                                <label for="lineaQuo">Línea:</label>
                                <input type="number" id="lineaQuo" name="lineaQuo" class="form-control form-control-sm" value="{{detalle.lineaQuo}}" required>
                            </div>
                            <div class="form-group col-md-4">
                                <label for="tipoQuo">Tipo (P/R):</label>
                                <select id="tipoQuo" name="tipoQuo" class="form-control form-control-sm" required>
                                    <option value="P" {{#eq detalle.tipoQuo 'P'}}selected{{/eq}}>P</option>
                                    <option value="R" {{#eq detalle.tipoQuo 'R'}}selected{{/eq}}>R</option>
                                </select>
                            </div>
                            <div class="form-group col-md-4">
                                <label for="cantidadQuo">Cantidad:</label>
                                <input type="number" id="cantidadQuo" name="cantidadQuo" class="form-control form-control-sm" value="{{detalle.cantidadQuo}}" required>
                            </div>
                        </div>
                        <!-- Descripción en una fila debajo -->
                        <div class="form-row">
                            <div class="form-group col-md-12">
                                <label for="descripcionQuo">Descripción:</label>
                                <textarea id="descripcionQuo" name="descripcionQuo" class="form-control form-control-sm" rows="2" required>{{detalle.descripcionQuo}}</textarea>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Espacio para agregar más elementos debajo -->
        <div class="row mt-4">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title">Elementos para el cálculo de Precio</h5>
                    </div>
                    <div class="card-body" id="elementos-body">
                        <!-- Primera línea de inputs -->
                        <div class="form-row">
                            <!-- Indicador de tipo de línea -->
                            <div class="form-group col-md-2">
                                <label for="tipoLinea">Tipo:</label>
                                <select id="tipoLinea" name="tipoLinea" class="form-control form-control-sm" required>
                                    <option value="P">P - Papel</option>
                                    <option value="T">T - Tinta</option>
                                    <option value="L">L - Plancha</option>
                                    <option value="C">C - Película</option>
                                    <option value="A">A - Acabado</option>
                                    <option value="R">R - Preprensa</option>
                                    <option value="M">M - Mano de Obra</option>
                                    <option value="I">I - Costos Indirectos</option>
                                    <option value="O">O - Gastos Operativos</option>
                                    <option value="S">S - Plastificado</option>
                                    <option value="U">U - Utilidad</option>
                                </select>
                            </div>
                            <!-- No. Artículo -->
                            <div class="form-group col-md-1">
                                <label for="noArticulo">No. Art.:</label>
                                <select id="noArticulo" name="noArticulo" class="form-control form-control-sm" required>
                                    <!-- Aquí se cargarán los artículos desde la base de datos -->
                                </select>
                            </div>
                            <!-- Cantidad -->
                            <div class="form-group col-md-1">
                                <label for="cantidad">Cantidad:</label>
                                <input type="number" id="cantidad" name="cantidad" class="form-control form-control-sm" required>
                            </div>
                            <!-- Precio -->
                            <div class="form-group col-md-1">
                                <label for="precio">Precio:</label>
                                <input type="number" id="precio" name="precio" class="form-control form-control-sm" readonly>
                            </div>
                            <!-- Detalle -->
                            <div class="form-group col-md-5">
                                <label for="detalle">Detalle:</label>
                                <input type="text" id="detalle" name="detalle" class="form-control form-control-sm" readonly>
                            </div>
                            <!-- Monto -->
                            <div class="form-group col-md-2">
                                <label for="monto">Monto:</label>
                                <input type="number" id="monto" name="monto" class="form-control form-control-sm" readonly>
                            </div>
                        </div>
                        <!-- Campos ocultos -->
                        <div class="form-row hidden">
                            <!-- Factor -->
                            <div class="form-group col-md-2">
                                <label for="factor">Factor:</label>
                                <input type="number" id="factor" name="factor" class="form-control form-control-sm">
                            </div>
                            <!-- CantidadM -->
                            <div class="form-group col-md-2">
                                <label for="cantidadM">CantidadM:</label>
                                <input type="number" id="cantidadM" name="cantidadM" class="form-control form-control-sm">
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Script para manejar la lógica del formulario -->
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const tipoLineaSelect = document.getElementById('tipoLinea');
            const elementosBody = document.getElementById('elementos-body');
            let filaIndex = 0; // Contador de filas

            // 🔹 Función para actualizar los ID de una fila
            function actualizarIdsFila(fila, index) {
                fila.querySelectorAll('input, select').forEach(input => {
                    if (input.id) {
                        input.id = `${input.id.split('-')[0]}-${index}`;
                    }
                });
            }

            // 🔹 Función para calcular los montos
            function calcularMontos(fila, index) {
                const cantidadInput = fila.querySelector(`#cantidad-${index}`);
                const precioInput = fila.querySelector(`#precio-${index}`);
                const montoInput = fila.querySelector(`#monto-${index}`);
                const factorInput = fila.querySelector(`#factor-${index}`);
                const cantidadMInput = fila.querySelector(`#cantidadM-${index}`);

                if (!cantidadInput || !precioInput || !montoInput || !factorInput || !cantidadMInput) {
                    console.error(`⚠️ Faltan elementos en la fila ${index}`);
                    return;
                }

                const cantidad = parseFloat(cantidadInput.value) || 0;
                const precio = parseFloat(precioInput.value) || 0;
                const factor = parseFloat(factorInput.value) || 0;

                montoInput.value = (cantidad * precio).toFixed(2);
                cantidadMInput.value = ((cantidad * factor) / 1000).toFixed(2);
            }

            // 🔹 Función para crear una nueva fila
            function crearNuevaFila() {
                const primeraFilaVisible = elementosBody.querySelector('.form-row:not(.hidden)');
                const filaOculta = elementosBody.querySelector('.form-row.hidden');

                if (!primeraFilaVisible || !filaOculta) {
                    console.error("⚠️ No se encontraron filas para clonar.");
                    return;
                }

                filaIndex++;

                const nuevaFilaVisible = primeraFilaVisible.cloneNode(true);
                const nuevaFilaOculta = filaOculta.cloneNode(true);

                actualizarIdsFila(nuevaFilaVisible, filaIndex);
                actualizarIdsFila(nuevaFilaOculta, filaIndex);

                elementosBody.appendChild(nuevaFilaVisible);
                elementosBody.appendChild(nuevaFilaOculta);

                nuevaFilaVisible.querySelector(`#tipoLinea-${filaIndex}`).focus();
            }

            // 🔹 Escuchar cambios en todos los selects "No. Artículo" (EVENTO DELEGADO)
            document.addEventListener('change', async function (event) {
                if (event.target && event.target.matches('[id^="noArticulo-"]')) {
                    console.log("🔹 Evento 'change' disparado en:", event.target);

                    const selectedCode = event.target.value;
                    if (!selectedCode) return;

                    try {
                        const response = await fetch(`/api/articles/${selectedCode}`);
                        if (!response.ok) throw new Error('⚠️ Error al cargar artículo');

                        const article = await response.json();
                        console.log("📌 Artículo cargado:", article);

                        // 🔹 Buscar la fila donde está el select
                        const fila = event.target.closest('.form-row');
                        console.log("🔍 FILA ENCONTRADA:", fila.innerHTML);  

                        if (!fila) {
                            console.error("❌ No se encontró la fila.");
                            return;
                        }

                        // 🔹 Ver todo lo que hay en la fila
                        console.log("🔍 TODOS LOS ELEMENTOS DENTRO DE FILA:");
                        fila.querySelectorAll('*').forEach(el => console.log(el.tagName, el.id, el.className));

                        // 🔹 Intentar encontrar los inputs dentro de la fila
                        const descripcionInput = fila.querySelector('input[name="detalle"]') || fila.querySelector('#detalle');
                        const precioInput = fila.querySelector('input[name="precio"]') || fila.querySelector('#precio');
                        const factorInput = fila.querySelector('input[name="factor"]') || fila.querySelector('#factor');

                        console.log("🔍 Inputs encontrados:");
                        console.log("➡️ Descripción input:", descripcionInput);
                        console.log("➡️ Precio input:", precioInput);
                        console.log("➡️ Factor input:", factorInput);

                        if (!descripcionInput || !precioInput || !factorInput) {
                            console.error("❌ No se encontraron los inputs dentro de la fila.");
                            return;
                        }

                        // 🔹 Asignar valores
                        descripcionInput.value = article.descCT || '';
                        precioInput.value = article.montoCT || 0;
                        factorInput.value = (tipoLineaSelect.value === 'P') ? article.factorCT || 0 : '';

                        calcularMontos(fila, 0);
                    } catch (error) {
                        console.error("❌ Error al cargar artículo:", error);
                    }
                }
            });


            // 🔹 Escuchar cambios en el tipo de línea para cargar artículos filtrados
            tipoLineaSelect.addEventListener('change', function () {
                console.log("🔹 Tipo de línea cambiado a:", tipoLineaSelect.value);
                loadArticles(tipoLineaSelect.value === 'P' ? 'PAP' : '');
            });

            // 🔹 Función para cargar artículos en el select
            async function loadArticles(filter = '') {
                try {
                    const response = await fetch(`/api/articles?filter=${filter}`);
                    if (!response.ok) throw new Error('⚠️ Error al cargar artículos');

                    const articles = await response.json();
                    const noArticuloSelect = document.getElementById('noArticulo-0');

                    if (!noArticuloSelect) {
                        console.error("⚠️ No se encontró el select de No. Artículo.");
                        return;
                    }

                    noArticuloSelect.innerHTML = '';
                    articles.forEach(article => {
                        const option = document.createElement('option');
                        option.value = article.codigoCT;
                        option.textContent = `${article.codigoCT} - ${article.descCT}`;
                        noArticuloSelect.appendChild(option);
                    });
                } catch (error) {
                    console.error("❌ Error al cargar artículos:", error);
                }
            }

            // 🔹 Inicializar eventos en la primera fila si existe
            const primeraFila = elementosBody.querySelector('.form-row:not(.hidden)');
            if (primeraFila) {
                actualizarIdsFila(primeraFila, filaIndex);
            } else {
                console.error("⚠️ No se encontró la primera fila.");
            }
        });
    </script>
</body>
</html>